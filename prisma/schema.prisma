// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            Int              @id @default(autoincrement()) @map("user_id")
  cognitoId         String           @unique @map("cognito_id")
  username          String           @unique
  profilePictureUrl String?          @map("profile_picture_url")
  teamId            Int?             @map("team_id")
  team              Team?            @relation(fields: [teamId], references: [id])
  authoredTasks     Task[]           @relation("TaskAuthor")
  assignedTasks     Task[]           @relation("TaskAssignee")
  taskAssignments   TaskAssignment[]
  attachments       Attachment[]
  comments          Comment[]
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String        @map("team_name")
  productOwnerUserId   Int?          @map("product_owner_user_id")
  projectManagerUserId Int?          @map("project_manager_user_id")
  projectTeams         ProjectTeam[]
  user                 User[]
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  startDate    DateTime?     @map("start_date")
  endDate      DateTime?     @map("end_date")
  tasks        Task[]
  projectTeams ProjectTeam[]
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int     @map("team_id")
  projectId Int     @map("project_id")
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Task {
  id              Int              @id @default(autoincrement())
  title           String
  description     String?
  status          String?
  priority        String?
  tags            String?
  startDate       DateTime?        @map("start_date")
  dueDate         DateTime?        @map("due_date")
  points          Int?
  projectId       Int              @map("project_id")
  authorUserId    Int              @map("author_user_id")
  assignedUserId  Int?             @map("assigned_user_id")
  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model TaskAssignment {
  id     Int  @id @default(autoincrement())
  userId Int  @map("user_id")
  taskId Int  @map("task_id")
  user   User @relation(fields: [userId], references: [userId])
  task   Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String  @map("file_url")
  fileName     String? @map("file_name")
  taskId       Int     @map("task_id")
  uploadedById Int     @map("uploaded_by_id")
  task         Task    @relation(fields: [taskId], references: [id])
  uploadedBy   User    @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int    @map("task_id")
  userId Int    @map("user_id")
  task   Task   @relation(fields: [taskId], references: [id])
  user   User   @relation(fields: [userId], references: [userId])
}
